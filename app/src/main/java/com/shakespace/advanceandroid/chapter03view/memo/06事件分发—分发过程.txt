
1. 从Activity开始

           public boolean dispatchTouchEvent(MotionEvent ev) {
               if (ev.getAction() == MotionEvent.ACTION_DOWN) {
                   onUserInteraction();
               }
               if (getWindow().superDispatchTouchEvent(ev)) {  // MEMO 传递给PhoneWindow 处理，phoneWindow -- DecorView -- ViewGroup
                   return true;
               }
               return onTouchEvent(ev); // MEMO 当上面的dispatch 返回false 的之后， 相当于没有控件消费时间，最终会走Activity的 onTouchEvent
           }

        本质 dispatchTouchEvent（）{
                if（onInterceptTouchEvent）
                     onTouchEvent
                else{
                    child.dispatchTouchEvent
                }
        }

2. ViewGroup
                ...
                if (onFilterTouchEventForSecurity(ev)) { // MEMO 安全检查
                    final int action = ev.getAction();
                    final int actionMasked = action & MotionEvent.ACTION_MASK;

                    // Handle an initial down.
                    if (actionMasked == MotionEvent.ACTION_DOWN) { //  MEMO  多指事件
                        // Throw away all previous state when starting a new touch gesture.
                        // The framework may have dropped the up or cancel event for the previous gesture
                        // due to an app switch, ANR, or some other state change.
                        cancelAndClearTouchTargets(ev);
                        resetTouchState();
                    }

                    // Check for interception.
                    final boolean intercepted;
                           //MEMO 先判断 down  事件，因为一个事件序列是由 down开始，0+个MVOE事件 ， 一个UP事件组成的。
                                   mFirstTouchTarget 是用来记录 当前ViewGroup中 用来接收事件的 对象， 第一次是 null 。
                                   在非DOWN事件中，如果这个值为null ，说明当前ViewGroup拦截了事件
                                    判断 flag ， flag表示 子类是否请求父类不拦截 ， true 表示不拦截
                                    一般子类不调用 tv_move.parent.requestDisallowInterceptTouchEvent(true)

                            // MEMO 一般情况下， 子类不做这个请求，父类会执行默认拦截方法，但是 默认返回是false ，等于还是不拦截。
                                    如果我们重写了  父类 onInterceptTouchEvent 并返回true ，但是子类调用 parent.requestDisallowInterceptTouchEvent(true)
                                    disallowIntercept 就是true ，因而不走 onInterceptTouchEvent(ev) 直接走else intercepted = false;
                                    （注意，此时不是down事件，但是 mFirstTouchTarget 已经不是null）
                    if (actionMasked == MotionEvent.ACTION_DOWN
                            || mFirstTouchTarget != null) {
                        final boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;
                        if (!disallowIntercept) {
                            intercepted = onInterceptTouchEvent(ev);
                            ev.setAction(action); // restore action in case it was changed
                        } else {
                            intercepted = false;
                        }
                    } else {
                        // There are no touch targets and this action is not an initial down
                        // so this view group continues to intercept touches.
                        intercepted = true;
                    }

                    // If intercepted, start normal event dispatch. Also if there is already
                    // a view that is handling the gesture, do normal event dispatch.
                    if (intercepted || mFirstTouchTarget != null) {
                        ev.setTargetAccessibilityFocus(false);
                    }


3. if (!canceled && !intercepted) {
                      if (actionMasked == MotionEvent.ACTION_DOWN // MEMO  一般是ACTION_DOWN  ,ACTION_UP 时，整个判断是false ，MOVE 和 UP事件 都不会进入这个case
                                || (split && actionMasked == MotionEvent.ACTION_POINTER_DOWN)
                                || actionMasked == MotionEvent.ACTION_HOVER_MOVE) {

                                    if (newTouchTarget == null && childrenCount != 0) { // newTouchTarget 一般为null
                                        // MEMO 在DOWN 事件中，会倒序遍历子View  （靠后的在上层）
                                            最终要找到能接受事件的View ，这个View就是上层ViewGroup的 mFirstTouchTarget
                                            TouchTarget 在单触摸点时，就是个普通实例
                                            多点时，变成链表，指向其他点击点

                                          // 关于mFirstTouchTarget 可参考 https://www.jianshu.com/p/5951ebdd2a7e



4. 倒序遍历子元素
    判断范围、或者动画
    调用 dispatchTransformedTouchEvent 方法
    如果是viewGroup 继续分发，如果是 没有子view，调用  super.dispatchTouchEvent(event)

5. ViewGroup的父类是View
    这里的关键是
                  if (onFilterTouchEventForSecurity(event)) {
                        if ((mViewFlags & ENABLED_MASK) == ENABLED && handleScrollBarDragging(event)) {
                            result = true;
                        }
                        //noinspection SimplifiableIfStatement
                        ListenerInfo li = mListenerInfo;
                        if (li != null && li.mOnTouchListener != null
                                && (mViewFlags & ENABLED_MASK) == ENABLED
                                && li.mOnTouchListener.onTouch(this, event)) {
                            result = true;
                        }

                        if (!result && onTouchEvent(event)) {
                            result = true;
                        }
                    }
    // MEMO  如有 mOnTouchListener 先执行 mOnTouchListener.onTouch(this, event)
        再（有可能）执行onTouchEvent
        mOnTouchListener 的优先级更高

6. 之后再onTouchEvent() 的ACTION_UP 里，

     final boolean clickable = ((viewFlags & CLICKABLE) == CLICKABLE
                    || (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)
                    || (viewFlags & CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;
          //MEMO 可点击 需要 点击事件、长按事件、右击事件 ，三者要有一个。

            boolean prepressed = (mPrivateFlags & PFLAG_PREPRESSED) != 0;
                             if ((mPrivateFlags & PFLAG_PRESSED) != 0 || prepressed) {
                                 // take focus if we don't have it already and we should in
                                 // touch mode.
                                 boolean focusTaken = false;
                                 if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {
                                     focusTaken = requestFocus();
                                 }

                                 if (prepressed) {
                                     // The button is being released before we actually
                                     // showed it as pressed.  Make it show the pressed
                                     // state now (before scheduling the click) to ensure
                                     // the user sees it.
                                     setPressed(true, x, y);
                                 }

                                 if (!mHasPerformedLongPress && !mIgnoreNextUpEvent) {
                                     // This is a tap, so remove the longpress check
                                     removeLongPressCallback();

                                     // Only perform take click actions if we were in the pressed state
                                     if (!focusTaken) {
                                         // Use a Runnable and post this rather than calling
                                         // performClick directly. This lets other visual state
                                         // of the view update before click actions start.
                                         if (mPerformClick == null) {
                                             mPerformClick = new PerformClick();
                                         }
                                         if (!post(mPerformClick)) {
                                             performClickInternal(); //  MEMO  执行点击事件
                                         }
                                     }
                                 }

                                 if (mUnsetPressedState == null) {
                                     mUnsetPressedState = new UnsetPressedState();
                                 }

                                 if (prepressed) {
                                     postDelayed(mUnsetPressedState,
                                             ViewConfiguration.getPressedStateDuration());
                                 } else if (!post(mUnsetPressedState)) {
                                     // If the post failed, unpress right now
                                     mUnsetPressedState.run();
                                 }

                                 removeTapCallback();
                             }
                             mIgnoreNextUpEvent = false;
                             break;

7.    public boolean performClick() {
           // We still need to call this method to handle the cases where performClick() was called
           // externally, instead of through performClickInternal()
           notifyAutofillManagerOnClick();

           final boolean result;
           final ListenerInfo li = mListenerInfo;
           if (li != null && li.mOnClickListener != null) {
               playSoundEffect(SoundEffectConstants.CLICK);
               li.mOnClickListener.onClick(this);       // MEMO  点击事件
               result = true;
           } else {
               result = false;
           }

           sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);

           notifyEnterOrExitForAutoFillIfNeeded(true);

           return result;
       }