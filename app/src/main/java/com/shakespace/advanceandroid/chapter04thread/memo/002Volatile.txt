
1. 内存模型：
    线程之间的共享变量存储在主存中，每个线程有一个 私有的本地内存 【抽象概念】
    执行语句时会先对变量i所在的缓存进行赋值操作，再写入主存


原子性
    针对一个操作过程，要么成功要么不执行，满足这个条件的操作就是原子性操作

    当一个语句含有多个操作的时候，就不是原子性操作
    java.util.concurrent.atomic 下很多类 提供了原子性的自增自减操作 [使用机器级指令，而不是锁]
    AtomicInteger 可以用做共享计数器 而无需同步

可见性
    一个线程的修改是否对另一个线程可见
    当一个共享变量被volatile修饰时，其修改的值会被立刻更新到主存中

    普通变量被修改后，并不会立即写入主存，何时写入主存也是不确定的。

有序性
    Java内存模型中允许编译器和处理器对指令进行重排序，重排序不会影响单线程的结果，但是多线程时会有影响

    volatile 可以禁止指令重排




